#!/bin/bash
# Check if script is being run as root
if [[ $EUID -ne 0 ]]; then
    echo "Run this script as root." 2>&1
    exit 1
fi
# Check if system is booted in efi mode
echo "ls /sys/firmware/efi/efivars"
ls /sys/firmware/efi/efivars
echo
echo "Press 'Ctrl+c' to exit OR 'Enter' to continue"
read
# Update system clock
timedatectl set-ntp true
# List partitions
fdisk -l
echo
lsblk
echo
# Edit partitions
echo "cfdisk"
read
cfdisk
# List partitions
fdisk -l
echo
lsblk
# Edit partitions
echo "cfdisk"
read
cfdisk
# List partitions
fdisk -l
echo
lsblk
echo
# Input location of efi partition
read -p "efipartition (/dev/sdax) = " efipartition
echo $efipartition
echo
# Input location of root partition
read -p "ospartition (/dev/sdax) = " ospartition
echo $ospartition
echo
# Input bootloader id
read -p "Enter your preferred bootloader-id: " bootloaderid
echo $bootloaderid
echo
# Input hostname
read -p "Enter your hostname: " hostname
echo $hostname
echo
# Input username
read -p "Enter your preferred username: " username
echo $username
echo
# Format efi partition as fat32
echo mkfs.fat -F32 $efipartition
mkfs.fat -F32 $efipartition
echo
# Format root partition as ext4
echo mkfs.ext4 $ospartition
mkfs.ext4 $ospartition
echo
# Mount root partition to /mnt
mount $ospartition /mnt
# Install the base and base-devel package groups using pacstrap
echo "pacstrap /mnt base base-devel"
pacstrap /mnt base base-devel
echo
# Generate fstab
echo "Generate fstab."
genfstab -U /mnt >> /mnt/etc/fstab
echo
cat /mnt/etc/fstab
#-------------------------------------------------------------------
# Create chroot file
#-------------------------------------------------------------------
cat << EOT >> /root/arch/chroot
#!/bin/bash
# Check if script is being run as root
if [[ $EUID -ne 0 ]]; then
    echo "Run this script as root." 2>&1
    exit 1
fi
# Set the timezone to US-Pacific
ln -sf /usr/share/zoneinfo/US/Pacific /etc/localtime
# Generate /etc/adjtime
hwclock --systohc --utc
# Uncomment locale
echo "Setting locale: en_US.UTF-8 UTF-8 for American-English."
sed -i '/#en_US.UTF-8 UTF-8/s/^#//g' /etc/locale.gen
echo
# Set the LANG variable
echo "LANG=en_US.UTF-8"  > /etc/locale.conf
# Generate locale
locale-gen
echo
# Set hostname
echo $hostname > /etc/hostname
# Input root password
echo "Enter root password."
passwd
echo
# Create /boot/efi directory
mkdir /boot/efi
# Mount efi partition to the /boot/efi directory
mount $efipartition /boot/efi
echo
# Install some required packages for booting and stuff
pacman -S --needed intel-ucode grub efibootmgr sudo networkmanager os-prober wget
echo
# Install grub to /boot/efi
grub-install --target=x86_64-efi --efi-directory=/boot/efi --bootloader-id=$bootloaderid
echo
# Change grub timeout to 3
sudo sed -i '4s/5/0/' /etc/default/grub
# Generate grub config file
sudo grub-mkconfig -o /boot/grub/grub.cfg
echo
# Enable network manager
systemctl enable NetworkManager
# Create user
useradd -m -g users -G wheel -s /bin/bash $username
echo
# Input user password
echo Enter your user password.
passwd $username
echo
# Set admin priviliges
echo "Uncommenting the wheel group line."
sudo sed -i '/# %wheel ALL=(ALL) ALL/s/^#//g' /etc/sudoers
# Exit chroot
exit
EOT
#-------------------------------------------------------------------
# Remove extra files
rm /root/arch/LICENSE /root/arch/README.md
# Make remaining installation files executable
chmod +x /root/arch/*
# Move chroot script to /mnt
cp /root/arch/chroot /mnt
rm /root/arch/chroot
# Run the chroot script in the new system through chroot 
arch-chroot /mnt ./chroot
arch-chroot /mnt rm chroot
# Move remaining installation files to user home directory
mkdir /root/tempfolder
cp -a /root/arch/. /root/tempfolder
rm /root/tempfolder/install
cp -a /root/tempfolder/. /mnt/home/$username
rm -r /root/arch /root/tempfolder
# Unmount and reboot
umount -a
reboot
